// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/zeako/candidate-matcher/ent/candidate"
	"github.com/zeako/candidate-matcher/ent/job"
	"github.com/zeako/candidate-matcher/ent/predicate"
	"github.com/zeako/candidate-matcher/ent/skill"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCandidate = "Candidate"
	TypeJob       = "Job"
	TypeSkill     = "Skill"
)

// CandidateMutation represents an operation that mutate the Candidates
// nodes in the graph.
type CandidateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	clearedFields map[string]struct{}
	skills        map[int]struct{}
	removedskills map[int]struct{}
	clearedskills bool
	done          bool
	oldValue      func(context.Context) (*Candidate, error)
	predicates    []predicate.Candidate
}

var _ ent.Mutation = (*CandidateMutation)(nil)

// candidateOption allows to manage the mutation configuration using functional options.
type candidateOption func(*CandidateMutation)

// newCandidateMutation creates new mutation for $n.Name.
func newCandidateMutation(c config, op Op, opts ...candidateOption) *CandidateMutation {
	m := &CandidateMutation{
		config:        c,
		op:            op,
		typ:           TypeCandidate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCandidateID sets the id field of the mutation.
func withCandidateID(id int) candidateOption {
	return func(m *CandidateMutation) {
		var (
			err   error
			once  sync.Once
			value *Candidate
		)
		m.oldValue = func(ctx context.Context) (*Candidate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Candidate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCandidate sets the old Candidate of the mutation.
func withCandidate(node *Candidate) candidateOption {
	return func(m *CandidateMutation) {
		m.oldValue = func(context.Context) (*Candidate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CandidateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CandidateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CandidateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the title field.
func (m *CandidateMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the title value in the mutation.
func (m *CandidateMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old title value of the Candidate.
// If the Candidate object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CandidateMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle reset all changes of the "title" field.
func (m *CandidateMutation) ResetTitle() {
	m.title = nil
}

// AddSkillIDs adds the skills edge to Skill by ids.
func (m *CandidateMutation) AddSkillIDs(ids ...int) {
	if m.skills == nil {
		m.skills = make(map[int]struct{})
	}
	for i := range ids {
		m.skills[ids[i]] = struct{}{}
	}
}

// ClearSkills clears the skills edge to Skill.
func (m *CandidateMutation) ClearSkills() {
	m.clearedskills = true
}

// SkillsCleared returns if the edge skills was cleared.
func (m *CandidateMutation) SkillsCleared() bool {
	return m.clearedskills
}

// RemoveSkillIDs removes the skills edge to Skill by ids.
func (m *CandidateMutation) RemoveSkillIDs(ids ...int) {
	if m.removedskills == nil {
		m.removedskills = make(map[int]struct{})
	}
	for i := range ids {
		m.removedskills[ids[i]] = struct{}{}
	}
}

// RemovedSkills returns the removed ids of skills.
func (m *CandidateMutation) RemovedSkillsIDs() (ids []int) {
	for id := range m.removedskills {
		ids = append(ids, id)
	}
	return
}

// SkillsIDs returns the skills ids in the mutation.
func (m *CandidateMutation) SkillsIDs() (ids []int) {
	for id := range m.skills {
		ids = append(ids, id)
	}
	return
}

// ResetSkills reset all changes of the "skills" edge.
func (m *CandidateMutation) ResetSkills() {
	m.skills = nil
	m.clearedskills = false
	m.removedskills = nil
}

// Op returns the operation name.
func (m *CandidateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Candidate).
func (m *CandidateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CandidateMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.title != nil {
		fields = append(fields, candidate.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CandidateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case candidate.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CandidateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case candidate.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Candidate field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CandidateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case candidate.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Candidate field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CandidateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CandidateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CandidateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Candidate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CandidateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CandidateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CandidateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Candidate nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CandidateMutation) ResetField(name string) error {
	switch name {
	case candidate.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Candidate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CandidateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.skills != nil {
		edges = append(edges, candidate.EdgeSkills)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CandidateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case candidate.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.skills))
		for id := range m.skills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CandidateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedskills != nil {
		edges = append(edges, candidate.EdgeSkills)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CandidateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case candidate.EdgeSkills:
		ids := make([]ent.Value, 0, len(m.removedskills))
		for id := range m.removedskills {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CandidateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedskills {
		edges = append(edges, candidate.EdgeSkills)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CandidateMutation) EdgeCleared(name string) bool {
	switch name {
	case candidate.EdgeSkills:
		return m.clearedskills
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CandidateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Candidate unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CandidateMutation) ResetEdge(name string) error {
	switch name {
	case candidate.EdgeSkills:
		m.ResetSkills()
		return nil
	}
	return fmt.Errorf("unknown Candidate edge %s", name)
}

// JobMutation represents an operation that mutate the Jobs
// nodes in the graph.
type JobMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	clearedFields map[string]struct{}
	skill         *int
	clearedskill  bool
	done          bool
	oldValue      func(context.Context) (*Job, error)
	predicates    []predicate.Job
}

var _ ent.Mutation = (*JobMutation)(nil)

// jobOption allows to manage the mutation configuration using functional options.
type jobOption func(*JobMutation)

// newJobMutation creates new mutation for $n.Name.
func newJobMutation(c config, op Op, opts ...jobOption) *JobMutation {
	m := &JobMutation{
		config:        c,
		op:            op,
		typ:           TypeJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJobID sets the id field of the mutation.
func withJobID(id int) jobOption {
	return func(m *JobMutation) {
		var (
			err   error
			once  sync.Once
			value *Job
		)
		m.oldValue = func(ctx context.Context) (*Job, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Job.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJob sets the old Job of the mutation.
func withJob(node *Job) jobOption {
	return func(m *JobMutation) {
		m.oldValue = func(context.Context) (*Job, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *JobMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the title field.
func (m *JobMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the title value in the mutation.
func (m *JobMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old title value of the Job.
// If the Job object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *JobMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle reset all changes of the "title" field.
func (m *JobMutation) ResetTitle() {
	m.title = nil
}

// SetSkillID sets the skill edge to Skill by id.
func (m *JobMutation) SetSkillID(id int) {
	m.skill = &id
}

// ClearSkill clears the skill edge to Skill.
func (m *JobMutation) ClearSkill() {
	m.clearedskill = true
}

// SkillCleared returns if the edge skill was cleared.
func (m *JobMutation) SkillCleared() bool {
	return m.clearedskill
}

// SkillID returns the skill id in the mutation.
func (m *JobMutation) SkillID() (id int, exists bool) {
	if m.skill != nil {
		return *m.skill, true
	}
	return
}

// SkillIDs returns the skill ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// SkillID instead. It exists only for internal usage by the builders.
func (m *JobMutation) SkillIDs() (ids []int) {
	if id := m.skill; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSkill reset all changes of the "skill" edge.
func (m *JobMutation) ResetSkill() {
	m.skill = nil
	m.clearedskill = false
}

// Op returns the operation name.
func (m *JobMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Job).
func (m *JobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *JobMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.title != nil {
		fields = append(fields, job.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *JobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case job.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *JobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case job.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Job field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case job.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *JobMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *JobMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JobMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Job numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *JobMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *JobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *JobMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Job nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *JobMutation) ResetField(name string) error {
	switch name {
	case job.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Job field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *JobMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.skill != nil {
		edges = append(edges, job.EdgeSkill)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *JobMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case job.EdgeSkill:
		if id := m.skill; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *JobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *JobMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *JobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedskill {
		edges = append(edges, job.EdgeSkill)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *JobMutation) EdgeCleared(name string) bool {
	switch name {
	case job.EdgeSkill:
		return m.clearedskill
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *JobMutation) ClearEdge(name string) error {
	switch name {
	case job.EdgeSkill:
		m.ClearSkill()
		return nil
	}
	return fmt.Errorf("unknown Job unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *JobMutation) ResetEdge(name string) error {
	switch name {
	case job.EdgeSkill:
		m.ResetSkill()
		return nil
	}
	return fmt.Errorf("unknown Job edge %s", name)
}

// SkillMutation represents an operation that mutate the Skills
// nodes in the graph.
type SkillMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	candidate        map[int]struct{}
	removedcandidate map[int]struct{}
	clearedcandidate bool
	job              map[int]struct{}
	removedjob       map[int]struct{}
	clearedjob       bool
	done             bool
	oldValue         func(context.Context) (*Skill, error)
	predicates       []predicate.Skill
}

var _ ent.Mutation = (*SkillMutation)(nil)

// skillOption allows to manage the mutation configuration using functional options.
type skillOption func(*SkillMutation)

// newSkillMutation creates new mutation for $n.Name.
func newSkillMutation(c config, op Op, opts ...skillOption) *SkillMutation {
	m := &SkillMutation{
		config:        c,
		op:            op,
		typ:           TypeSkill,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkillID sets the id field of the mutation.
func withSkillID(id int) skillOption {
	return func(m *SkillMutation) {
		var (
			err   error
			once  sync.Once
			value *Skill
		)
		m.oldValue = func(ctx context.Context) (*Skill, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Skill.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkill sets the old Skill of the mutation.
func withSkill(node *Skill) skillOption {
	return func(m *SkillMutation) {
		m.oldValue = func(context.Context) (*Skill, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkillMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkillMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SkillMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *SkillMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *SkillMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Skill.
// If the Skill object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SkillMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *SkillMutation) ResetName() {
	m.name = nil
}

// AddCandidateIDs adds the candidate edge to Candidate by ids.
func (m *SkillMutation) AddCandidateIDs(ids ...int) {
	if m.candidate == nil {
		m.candidate = make(map[int]struct{})
	}
	for i := range ids {
		m.candidate[ids[i]] = struct{}{}
	}
}

// ClearCandidate clears the candidate edge to Candidate.
func (m *SkillMutation) ClearCandidate() {
	m.clearedcandidate = true
}

// CandidateCleared returns if the edge candidate was cleared.
func (m *SkillMutation) CandidateCleared() bool {
	return m.clearedcandidate
}

// RemoveCandidateIDs removes the candidate edge to Candidate by ids.
func (m *SkillMutation) RemoveCandidateIDs(ids ...int) {
	if m.removedcandidate == nil {
		m.removedcandidate = make(map[int]struct{})
	}
	for i := range ids {
		m.removedcandidate[ids[i]] = struct{}{}
	}
}

// RemovedCandidate returns the removed ids of candidate.
func (m *SkillMutation) RemovedCandidateIDs() (ids []int) {
	for id := range m.removedcandidate {
		ids = append(ids, id)
	}
	return
}

// CandidateIDs returns the candidate ids in the mutation.
func (m *SkillMutation) CandidateIDs() (ids []int) {
	for id := range m.candidate {
		ids = append(ids, id)
	}
	return
}

// ResetCandidate reset all changes of the "candidate" edge.
func (m *SkillMutation) ResetCandidate() {
	m.candidate = nil
	m.clearedcandidate = false
	m.removedcandidate = nil
}

// AddJobIDs adds the job edge to Job by ids.
func (m *SkillMutation) AddJobIDs(ids ...int) {
	if m.job == nil {
		m.job = make(map[int]struct{})
	}
	for i := range ids {
		m.job[ids[i]] = struct{}{}
	}
}

// ClearJob clears the job edge to Job.
func (m *SkillMutation) ClearJob() {
	m.clearedjob = true
}

// JobCleared returns if the edge job was cleared.
func (m *SkillMutation) JobCleared() bool {
	return m.clearedjob
}

// RemoveJobIDs removes the job edge to Job by ids.
func (m *SkillMutation) RemoveJobIDs(ids ...int) {
	if m.removedjob == nil {
		m.removedjob = make(map[int]struct{})
	}
	for i := range ids {
		m.removedjob[ids[i]] = struct{}{}
	}
}

// RemovedJob returns the removed ids of job.
func (m *SkillMutation) RemovedJobIDs() (ids []int) {
	for id := range m.removedjob {
		ids = append(ids, id)
	}
	return
}

// JobIDs returns the job ids in the mutation.
func (m *SkillMutation) JobIDs() (ids []int) {
	for id := range m.job {
		ids = append(ids, id)
	}
	return
}

// ResetJob reset all changes of the "job" edge.
func (m *SkillMutation) ResetJob() {
	m.job = nil
	m.clearedjob = false
	m.removedjob = nil
}

// Op returns the operation name.
func (m *SkillMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Skill).
func (m *SkillMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SkillMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, skill.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SkillMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skill.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SkillMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skill.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Skill field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkillMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skill.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SkillMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SkillMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SkillMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Skill numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SkillMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SkillMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkillMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Skill nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SkillMutation) ResetField(name string) error {
	switch name {
	case skill.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Skill field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SkillMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.candidate != nil {
		edges = append(edges, skill.EdgeCandidate)
	}
	if m.job != nil {
		edges = append(edges, skill.EdgeJob)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SkillMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeCandidate:
		ids := make([]ent.Value, 0, len(m.candidate))
		for id := range m.candidate {
			ids = append(ids, id)
		}
		return ids
	case skill.EdgeJob:
		ids := make([]ent.Value, 0, len(m.job))
		for id := range m.job {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SkillMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcandidate != nil {
		edges = append(edges, skill.EdgeCandidate)
	}
	if m.removedjob != nil {
		edges = append(edges, skill.EdgeJob)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SkillMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case skill.EdgeCandidate:
		ids := make([]ent.Value, 0, len(m.removedcandidate))
		for id := range m.removedcandidate {
			ids = append(ids, id)
		}
		return ids
	case skill.EdgeJob:
		ids := make([]ent.Value, 0, len(m.removedjob))
		for id := range m.removedjob {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SkillMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcandidate {
		edges = append(edges, skill.EdgeCandidate)
	}
	if m.clearedjob {
		edges = append(edges, skill.EdgeJob)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SkillMutation) EdgeCleared(name string) bool {
	switch name {
	case skill.EdgeCandidate:
		return m.clearedcandidate
	case skill.EdgeJob:
		return m.clearedjob
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SkillMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Skill unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SkillMutation) ResetEdge(name string) error {
	switch name {
	case skill.EdgeCandidate:
		m.ResetCandidate()
		return nil
	case skill.EdgeJob:
		m.ResetJob()
		return nil
	}
	return fmt.Errorf("unknown Skill edge %s", name)
}
